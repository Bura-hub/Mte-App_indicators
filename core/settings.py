"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path
from dotenv import load_dotenv
from datetime import timedelta

load_dotenv()

# Accede a las variables de entorno
SCADA_USERNAME = os.getenv("SCADA_USERNAME")
SCADA_PASSWORD = os.getenv("SCADA_PASSWORD")

# Asegúrate de que existan (para depuración, en producción fallará si no están seteadas)
if not SCADA_USERNAME or not SCADA_PASSWORD:
    raise EnvironmentError("SCADA_USERNAME or SCADA_PASSWORD environment variables are not set.")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-e=gg2m8*l$v$#0qq%*^sxpu23!kfw6rak55*o2t^_0^*w!^-zi'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Mis Aplicaciones
    'rest_framework',
    'corsheaders',
    'indicators',
    'rest_framework.authtoken',
    'authentication',
    'scada_proxy',
    'django_celery_beat',
    'django_filters',
    'drf_spectacular',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware', # Agregar preferiblemente antes de CommonMiddleware
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Configuración de CORS
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000", # El puerto por defecto de React
    "http://127.0.0.1:3000",
    # Añade aquí cualquier otro dominio donde se ejecute tu frontend
]

CORS_ALLOW_ALL_ORIGINS = False # Mejor especificar orígenes permitidos
# CORS_ALLOW_CREDENTIALS = True # Si necesitas enviar cookies o tokens de autenticación

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv("name_db"),
        'USER': os.getenv("user_postgres"),
        'PASSWORD': os.getenv("password_user_postgres"),
        'HOST': 'localhost',
        'PORT': os.getenv("port_postgres", '5432'),
        'OPTIONS': {
            'options': '-c client_encoding=UTF8'
        }
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'es-co'

TIME_ZONE = 'America/Bogota'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication', # Usar autenticación por token
        'rest_framework.authentication.SessionAuthentication', # Para el panel de administración
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated', # Por defecto, todas las vistas requieren autenticación
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake', # Un nombre único para tu caché en memoria
        'TIMEOUT': 300, # Tiempo predeterminado en segundos para que un elemento expire (ej. 5 minutos)
        'OPTIONS': {
            'MAX_ENTRIES': 1000 # Número máximo de entradas en la caché
        }
    }
}

# Configuración de Celery
# URL de tu broker de mensajes (Redis). Ajusta 'localhost' si Redis está en otro servidor.
CELERY_BROKER_URL = 'redis://localhost:6379/0'
# URL para almacenar los resultados de las tareas (útil para verificar el estado de las tareas)
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'

CELERY_ACCEPT_CONTENT = ['json'] # Formatos de datos aceptados
CELERY_TASK_SERIALIZER = 'json' # Serializador para los datos de la tarea
CELERY_RESULT_SERIALIZER = 'json' # Serializador para los resultados de la tarea
CELERY_TIMEZONE = 'America/Bogota' # ¡Asegúrate de que coincida con tu TIME_ZONE de Django!
CELERY_TASK_TRACK_STARTED = True
CELERY_RESULT_EXTENDED = True  # Para obtener más detalles de los resultados

CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
# Configuración para Celery Beat (planificador de tareas)
CELERY_BEAT_SCHEDULE = {
    'fetch-device-metadata-daily': {  # Sincroniza categorías y dispositivos una vez al día
        'task': 'scada_proxy.tasks.sync_scada_metadata',
        'schedule': timedelta(days=1),  # Ejecutar cada 24 horas
    },
    'fetch-historical-measurements-hourly': {  # Ingesta mediciones cada hora
        'task': 'scada_proxy.tasks.fetch_historical_measurements_for_all_devices',
        'schedule': timedelta(hours=1),  # Ejecutar cada hora
        'args': (int(timedelta(hours=2).total_seconds()),),  # 7200 segundos (últimas 2 horas)
    },
    'calculate-monthly-consumption-kpi-daily': {
        'task': 'indicators.tasks.calculate_monthly_consumption_kpi',
        'schedule': timedelta(days=1), # Ejecutar una vez al día
        # 'schedule': timedelta(hours=6), # O cada 6 horas, según la frecuencia deseada
        'args': (),
        'kwargs': {},
        'options': {'queue': 'default'}, # Asegúrate de que la cola sea la correcta
    },
}

SPECTACULAR_SETTINGS = {
    'TITLE': 'SIVET API',
    'DESCRIPTION': 'API para integrar datos SCADA con sistemas de monitoreo y análisis, permitiendo la consulta de dispositivos y mediciones, así como la ejecución y seguimiento de tareas de procesamiento histórico en segundo plano.',
    'VERSION': '1.0.0',
    "SERVE_INCLUDE_SCHEMA": False,
    "SECURITY": [{"TokenAuth": []}],
    "COMPONENTS": {
        "securitySchemes": {
            "TokenAuth": {
                "type": "apiKey",
                "in": "header",
                "name": "Authorization",
                "description": "Formato: **Token &lt;tu_token&gt;**"
            }
        }
    },
}